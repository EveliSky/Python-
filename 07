更加抽象
7.1 对象的意义
对象基本上可以看做尤数据结构和一系列算法组成的集合
多态，不同的类的对象可以使用相同的操作
封装，对外部世界隐藏实现细节
集成，以通用类为基础建立特殊的类
7.1.1 多态
多态意味着即使不知道所操作的对象类仍可以保持相同的操作模式。相同的操作对不同的对象会有不同的效果。
多态和方法
'abc'.count('a')          字符串对象
['1','2','a'].count('a')  列表对象，但是都有count方法，使用方法相同，预期结果也一样
这样使用会简单很多，不用考虑不同对象的不同方法
多态的多种形式
1+2 3
'a' + 'b' 'ab'
加运算对不同的对象有不同的规则，但是这个规则不需要每次都指出。只要对象支持加加运算，就可以使用加运算。
rerp函数是多态特征的代表，能对所有对象使用。
只要使用多态函数和多态运算符，多态就消除了。唯一破坏多态性的就是类型检查。
Python中的鸭子类型，如果一个东西看起来像鸭子，行为也像鸭子，那就是鸭子。
7.1.2 封装
封装是对全局作用域中其他区域隐藏多余的信息。不用关系对象如何构建而直接进行使用。
多态是不需要知道对象类型就可以进行方法调用。
对象的状态由它的特性(数据)来描述，对象的方法可以改变特性。封装关心对象的状态，隐藏细节但是保持对象的独立性。
7.1.3 继承
重用通用类的代码，通过继承使用旧方法，重写修改新对象的旧方法。
7.2 类和类型
7.2.1 类的本质
所有对象都属于某一个类，所有的对象都是类的实例。
鸟类是百灵鸟类超类，百灵鸟类是鸟类的子类。
子类包含超类的所有方法，子类要拓展一些新的方法
7.2.2 创建类
__metaclass__==type

class Person:
    def setName(self,name):
        self.name = name
    def getName(self):
        return self.name
    def greet(self):
        print("Hello,world! I'm %s" % self.name)
Person是类名，包含三个方法
self代表调用此方法的实例，总是作为第一个参数传入类函数中
a是Person实例，a.setName('aa')可以看做Person.setName(a,'aa')
7.2.3 特性，函数和方法
self参数是函数和方法的区别。函数不需要self参数。方法将第一个参数绑定为调用此方法的对象，调用时不需要提供。
class Class:
    def method(self):
        print("I have self")
def function():
    print("I don't ...")

instance = Class()
instance.method()  'I have self'  此时instance的method指向的是Class的method
instance.method = function
instance.method()  'I don't ...'  此时instance的method指向的是function

i1 = Class();
i1.method()   'I have self'
i1m = i1.method
i1m()   'I have self'   i1m现在指向的是Class的method,self指向的是i1
私有化
c.name  直接调用对象的特性
c.name = '123'  直接修改对象的特性
使用方便，不需要专门的方法，但是在不清楚对象内部细节的情况下风险较大，例如传入了非法值，空值。
如果使用专门的方法，可以对传入值进行检查，还可以对出入行为进行记录。
__aa  双下划线的可以将数据或者方法转化为私有变量。这样对象外部不能够直接访问，对象内部可以访问。
Python中，所有双下划线都被翻译成单下划线和类名的形式
函数名称__inaccessible
class._class__inaccessible
这样在对象外部也可以直接调用
s._class__inaccessible
但实践中不应该这么做
_a 单下划线开头的变量 保护变量，可以在子类中访问
import时不会导入下划线开头的变量

7.2.4 类的命名空间
两条语句功能类似
def foo(x):return x*x
foo = lambda x:x*x
foo绑定在了函数上，foo在全局可以定义，也可以在局部定义。
类也有自己的类命名空间，可由所有的实例访问。
class MemberCounter:
    member = 0
    def init(self):
        MemberCounter.member += 1

m1 = MemberCounter()
m1.init()
MemberCounter.member  1

m2 = MemberCounter()
m2.init()
MemberCounter.member  2
m1.member 2 member可由实例可以访问
m2.member 2

m1.member = 'Two'
m1.member  'Two'
m2.member   2
MemberCounter.member 2

m3 = MemberCounter()
m3.init()
MemberCounter.member  3

m1.member 'Two'
m2.member 3
m3.member 3
MemberCounter.member 3

m3.member,m2.member 指向MemberCounter.member,
m1.member 变更之后指向了'Two'，屏蔽了类范围内的变量
7.2.5 指定超类
 class A:
    def f1(self)
    def f2(self)

 class B(A):
    def f1(self)重写A中方法
    def f3(self)新建立方法
7.2.6 调查继承
issubclass(B,A) True B是A的子类
issubclass(A,B) False A不是B的子类

B.__bases__  获取基类
b = B()
isinstance(s,B) True 检查对象是否是某类实例
isinstance(s,A) True s也是超类A的对象
b.__class__  获取对象的类
7.2.7 多个超类
class A
    def f1(self)
class B
    def f1(self)
class C(A,B)
C中的f1按照继承顺序，A的f1会覆盖B的f1
如果B和A也是从某一个超类继承过来，在查找特定方法或者特性是，访问超类的顺序称MRO(Method Resolution Order，方法顺序判定)
7.2.8 接口和内省
处理多态时，只关心接口即可，也就是公开的方法和特性。Python中不需要显式的写明接口，需要对象有相应的函数和特性。
更灵活的方法是检查当前对象是否存在需要的方法或者特性
hasattr(tc,'talk')  True或者False
callable(getattr(tc,'talk',None)) talk是否可调用，None是目标不存在时返回的默认值
setattr(tc,'name','123') 设置对象的特性
7.3 面向对象的思考
属于同一类的应该放在一起。
不要让对象耦合太高
小心继承，尤其是多重继承。继承会让调试变的困难。
简单最好。

