充电时刻
Python包含一族模块，成为标准库
10.1 模块
import math
math.sin(0) 0.0
101.1 模块是程序
任何Python程序都可以作为模块导入
文件名为hello.py
print("Hello world!")
文件存在C:\python
import sys
sys.path.append('c:/python')  #临时在环境变量添加文件夹。除了在默认路径下，还要在此路径下寻找文件
import hello  'Hello world!'

再次导入时不会有任何反应。导入只需要一次。特别是两个模块需要相互导入的情况下。
显式重新导入可以用reload函数

10.1.2 模块用于定义
模块可以保持自己的作用域
模块中定义函数
代码重用
模块中增加测试代码
模块中会增加一些检查函数是否正常工作的代码
在主程序中(交互式提示符内)__name__的值是'__main__'
测试代码可以这样用
#hello4.py
def hello()
def test()

if __name__ == '__main__': test()
如果在主程序中导入，会执行测试函数
10.1.3 让你的模块可用
sys.path本身应该包含正确的目录
1将模块放置到正确的位置
import sys,pprint
pprint.pprint(sys.path)
会输出所有位置。pprint会优化输出结构。
2告诉编译器去哪里找
将文件夹加入到PATH路径中
3命名模块
文件名要和模块名一致
10.1.4 包
包是另一种模块，可以包含其他的模块。py文件是模块，包就是py文件所在的目录。
为了让Python将目录作为包对待，必须包含一个命名为__init__py的文件。
名为constants的包，文件constants/__init??.py 包含语句PI=3.14
import constants
print(PI) 3.14
建立一个叫drawing的包，包含shapes和colors模块
~/drawing/  包目录，drawing包
~/drawing/__init__py 包代码，drawing模块
~/drawing/colors.py  colors模块
~/drawing/shapes.py  shapes模块

import drawing   __init__模块中内容可用
import drawing.colors   __init__模块中内容不可用
from drawing import shapes __init__模块中内容不可用

10.2 探究模块
10.2.1 模块有什么
有一个copy的标准模块
import copy  不会报错
1使用dir
dir(copy)会将对象的所有特性列出
2__all__变量
copy.__all__  定义了模块的公有接口
10.2.2 用help获取帮助
help(copy.copy)  获取文档帮助
10.2.3 文档
print(range.__doc__)  查函模块的文档
10.2.4 使用源代码
print(copy.__file__)  打印模块的路径，需要查看源代码时使用
10.3 标准库
